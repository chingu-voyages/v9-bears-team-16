module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateColorPallete {
  count: Int!
}

type AggregateFontPairing {
  count: Int!
}

type AggregateTheme {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type ColorPallete {
  id: ID!
  title: String
  primaryLight: String!
  primaryDark: String!
  accentLight: String!
  accentDark: String!
  accentBrand: String!
}

type ColorPalleteConnection {
  pageInfo: PageInfo!
  edges: [ColorPalleteEdge]!
  aggregate: AggregateColorPallete!
}

input ColorPalleteCreateInput {
  id: ID
  title: String
  primaryLight: String!
  primaryDark: String!
  accentLight: String!
  accentDark: String!
  accentBrand: String!
}

input ColorPalleteCreateOneInput {
  create: ColorPalleteCreateInput
  connect: ColorPalleteWhereUniqueInput
}

type ColorPalleteEdge {
  node: ColorPallete!
  cursor: String!
}

enum ColorPalleteOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  primaryLight_ASC
  primaryLight_DESC
  primaryDark_ASC
  primaryDark_DESC
  accentLight_ASC
  accentLight_DESC
  accentDark_ASC
  accentDark_DESC
  accentBrand_ASC
  accentBrand_DESC
}

type ColorPalletePreviousValues {
  id: ID!
  title: String
  primaryLight: String!
  primaryDark: String!
  accentLight: String!
  accentDark: String!
  accentBrand: String!
}

type ColorPalleteSubscriptionPayload {
  mutation: MutationType!
  node: ColorPallete
  updatedFields: [String!]
  previousValues: ColorPalletePreviousValues
}

input ColorPalleteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ColorPalleteWhereInput
  AND: [ColorPalleteSubscriptionWhereInput!]
  OR: [ColorPalleteSubscriptionWhereInput!]
  NOT: [ColorPalleteSubscriptionWhereInput!]
}

input ColorPalleteUpdateDataInput {
  title: String
  primaryLight: String
  primaryDark: String
  accentLight: String
  accentDark: String
  accentBrand: String
}

input ColorPalleteUpdateInput {
  title: String
  primaryLight: String
  primaryDark: String
  accentLight: String
  accentDark: String
  accentBrand: String
}

input ColorPalleteUpdateManyMutationInput {
  title: String
  primaryLight: String
  primaryDark: String
  accentLight: String
  accentDark: String
  accentBrand: String
}

input ColorPalleteUpdateOneRequiredInput {
  create: ColorPalleteCreateInput
  update: ColorPalleteUpdateDataInput
  upsert: ColorPalleteUpsertNestedInput
  connect: ColorPalleteWhereUniqueInput
}

input ColorPalleteUpsertNestedInput {
  update: ColorPalleteUpdateDataInput!
  create: ColorPalleteCreateInput!
}

input ColorPalleteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  primaryLight: String
  primaryLight_not: String
  primaryLight_in: [String!]
  primaryLight_not_in: [String!]
  primaryLight_lt: String
  primaryLight_lte: String
  primaryLight_gt: String
  primaryLight_gte: String
  primaryLight_contains: String
  primaryLight_not_contains: String
  primaryLight_starts_with: String
  primaryLight_not_starts_with: String
  primaryLight_ends_with: String
  primaryLight_not_ends_with: String
  primaryDark: String
  primaryDark_not: String
  primaryDark_in: [String!]
  primaryDark_not_in: [String!]
  primaryDark_lt: String
  primaryDark_lte: String
  primaryDark_gt: String
  primaryDark_gte: String
  primaryDark_contains: String
  primaryDark_not_contains: String
  primaryDark_starts_with: String
  primaryDark_not_starts_with: String
  primaryDark_ends_with: String
  primaryDark_not_ends_with: String
  accentLight: String
  accentLight_not: String
  accentLight_in: [String!]
  accentLight_not_in: [String!]
  accentLight_lt: String
  accentLight_lte: String
  accentLight_gt: String
  accentLight_gte: String
  accentLight_contains: String
  accentLight_not_contains: String
  accentLight_starts_with: String
  accentLight_not_starts_with: String
  accentLight_ends_with: String
  accentLight_not_ends_with: String
  accentDark: String
  accentDark_not: String
  accentDark_in: [String!]
  accentDark_not_in: [String!]
  accentDark_lt: String
  accentDark_lte: String
  accentDark_gt: String
  accentDark_gte: String
  accentDark_contains: String
  accentDark_not_contains: String
  accentDark_starts_with: String
  accentDark_not_starts_with: String
  accentDark_ends_with: String
  accentDark_not_ends_with: String
  accentBrand: String
  accentBrand_not: String
  accentBrand_in: [String!]
  accentBrand_not_in: [String!]
  accentBrand_lt: String
  accentBrand_lte: String
  accentBrand_gt: String
  accentBrand_gte: String
  accentBrand_contains: String
  accentBrand_not_contains: String
  accentBrand_starts_with: String
  accentBrand_not_starts_with: String
  accentBrand_ends_with: String
  accentBrand_not_ends_with: String
  AND: [ColorPalleteWhereInput!]
  OR: [ColorPalleteWhereInput!]
  NOT: [ColorPalleteWhereInput!]
}

input ColorPalleteWhereUniqueInput {
  id: ID
}

type FontPairing {
  id: ID!
  title: String
  primary: String!
  secondary: String!
}

type FontPairingConnection {
  pageInfo: PageInfo!
  edges: [FontPairingEdge]!
  aggregate: AggregateFontPairing!
}

input FontPairingCreateInput {
  id: ID
  title: String
  primary: String!
  secondary: String!
}

input FontPairingCreateOneInput {
  create: FontPairingCreateInput
  connect: FontPairingWhereUniqueInput
}

type FontPairingEdge {
  node: FontPairing!
  cursor: String!
}

enum FontPairingOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  primary_ASC
  primary_DESC
  secondary_ASC
  secondary_DESC
}

type FontPairingPreviousValues {
  id: ID!
  title: String
  primary: String!
  secondary: String!
}

type FontPairingSubscriptionPayload {
  mutation: MutationType!
  node: FontPairing
  updatedFields: [String!]
  previousValues: FontPairingPreviousValues
}

input FontPairingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FontPairingWhereInput
  AND: [FontPairingSubscriptionWhereInput!]
  OR: [FontPairingSubscriptionWhereInput!]
  NOT: [FontPairingSubscriptionWhereInput!]
}

input FontPairingUpdateDataInput {
  title: String
  primary: String
  secondary: String
}

input FontPairingUpdateInput {
  title: String
  primary: String
  secondary: String
}

input FontPairingUpdateManyMutationInput {
  title: String
  primary: String
  secondary: String
}

input FontPairingUpdateOneRequiredInput {
  create: FontPairingCreateInput
  update: FontPairingUpdateDataInput
  upsert: FontPairingUpsertNestedInput
  connect: FontPairingWhereUniqueInput
}

input FontPairingUpsertNestedInput {
  update: FontPairingUpdateDataInput!
  create: FontPairingCreateInput!
}

input FontPairingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  primary: String
  primary_not: String
  primary_in: [String!]
  primary_not_in: [String!]
  primary_lt: String
  primary_lte: String
  primary_gt: String
  primary_gte: String
  primary_contains: String
  primary_not_contains: String
  primary_starts_with: String
  primary_not_starts_with: String
  primary_ends_with: String
  primary_not_ends_with: String
  secondary: String
  secondary_not: String
  secondary_in: [String!]
  secondary_not_in: [String!]
  secondary_lt: String
  secondary_lte: String
  secondary_gt: String
  secondary_gte: String
  secondary_contains: String
  secondary_not_contains: String
  secondary_starts_with: String
  secondary_not_starts_with: String
  secondary_ends_with: String
  secondary_not_ends_with: String
  AND: [FontPairingWhereInput!]
  OR: [FontPairingWhereInput!]
  NOT: [FontPairingWhereInput!]
}

input FontPairingWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createColorPallete(data: ColorPalleteCreateInput!): ColorPallete!
  updateColorPallete(data: ColorPalleteUpdateInput!, where: ColorPalleteWhereUniqueInput!): ColorPallete
  updateManyColorPalletes(data: ColorPalleteUpdateManyMutationInput!, where: ColorPalleteWhereInput): BatchPayload!
  upsertColorPallete(where: ColorPalleteWhereUniqueInput!, create: ColorPalleteCreateInput!, update: ColorPalleteUpdateInput!): ColorPallete!
  deleteColorPallete(where: ColorPalleteWhereUniqueInput!): ColorPallete
  deleteManyColorPalletes(where: ColorPalleteWhereInput): BatchPayload!
  createFontPairing(data: FontPairingCreateInput!): FontPairing!
  updateFontPairing(data: FontPairingUpdateInput!, where: FontPairingWhereUniqueInput!): FontPairing
  updateManyFontPairings(data: FontPairingUpdateManyMutationInput!, where: FontPairingWhereInput): BatchPayload!
  upsertFontPairing(where: FontPairingWhereUniqueInput!, create: FontPairingCreateInput!, update: FontPairingUpdateInput!): FontPairing!
  deleteFontPairing(where: FontPairingWhereUniqueInput!): FontPairing
  deleteManyFontPairings(where: FontPairingWhereInput): BatchPayload!
  createTheme(data: ThemeCreateInput!): Theme!
  updateTheme(data: ThemeUpdateInput!, where: ThemeWhereUniqueInput!): Theme
  updateManyThemes(data: ThemeUpdateManyMutationInput!, where: ThemeWhereInput): BatchPayload!
  upsertTheme(where: ThemeWhereUniqueInput!, create: ThemeCreateInput!, update: ThemeUpdateInput!): Theme!
  deleteTheme(where: ThemeWhereUniqueInput!): Theme
  deleteManyThemes(where: ThemeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  colorPallete(where: ColorPalleteWhereUniqueInput!): ColorPallete
  colorPalletes(where: ColorPalleteWhereInput, orderBy: ColorPalleteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ColorPallete]!
  colorPalletesConnection(where: ColorPalleteWhereInput, orderBy: ColorPalleteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ColorPalleteConnection!
  fontPairing(where: FontPairingWhereUniqueInput!): FontPairing
  fontPairings(where: FontPairingWhereInput, orderBy: FontPairingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FontPairing]!
  fontPairingsConnection(where: FontPairingWhereInput, orderBy: FontPairingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FontPairingConnection!
  theme(where: ThemeWhereUniqueInput!): Theme
  themes(where: ThemeWhereInput, orderBy: ThemeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Theme]!
  themesConnection(where: ThemeWhereInput, orderBy: ThemeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThemeConnection!
  node(id: ID!): Node
}

type Subscription {
  colorPallete(where: ColorPalleteSubscriptionWhereInput): ColorPalleteSubscriptionPayload
  fontPairing(where: FontPairingSubscriptionWhereInput): FontPairingSubscriptionPayload
  theme(where: ThemeSubscriptionWhereInput): ThemeSubscriptionPayload
}

type Theme {
  id: ID!
  title: String!
  description: String!
  colors: ColorPallete!
  fonts: FontPairing!
}

type ThemeConnection {
  pageInfo: PageInfo!
  edges: [ThemeEdge]!
  aggregate: AggregateTheme!
}

input ThemeCreateInput {
  id: ID
  title: String!
  description: String!
  colors: ColorPalleteCreateOneInput!
  fonts: FontPairingCreateOneInput!
}

type ThemeEdge {
  node: Theme!
  cursor: String!
}

enum ThemeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type ThemePreviousValues {
  id: ID!
  title: String!
  description: String!
}

type ThemeSubscriptionPayload {
  mutation: MutationType!
  node: Theme
  updatedFields: [String!]
  previousValues: ThemePreviousValues
}

input ThemeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThemeWhereInput
  AND: [ThemeSubscriptionWhereInput!]
  OR: [ThemeSubscriptionWhereInput!]
  NOT: [ThemeSubscriptionWhereInput!]
}

input ThemeUpdateInput {
  title: String
  description: String
  colors: ColorPalleteUpdateOneRequiredInput
  fonts: FontPairingUpdateOneRequiredInput
}

input ThemeUpdateManyMutationInput {
  title: String
  description: String
}

input ThemeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  colors: ColorPalleteWhereInput
  fonts: FontPairingWhereInput
  AND: [ThemeWhereInput!]
  OR: [ThemeWhereInput!]
  NOT: [ThemeWhereInput!]
}

input ThemeWhereUniqueInput {
  id: ID
}
`
      }
    