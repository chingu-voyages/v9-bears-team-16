// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  colorPallete: (where?: ColorPalleteWhereInput) => Promise<boolean>;
  fontPairing: (where?: FontPairingWhereInput) => Promise<boolean>;
  theme: (where?: ThemeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  colorPallete: (
    where: ColorPalleteWhereUniqueInput
  ) => ColorPalleteNullablePromise;
  colorPalletes: (args?: {
    where?: ColorPalleteWhereInput;
    orderBy?: ColorPalleteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ColorPallete>;
  colorPalletesConnection: (args?: {
    where?: ColorPalleteWhereInput;
    orderBy?: ColorPalleteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ColorPalleteConnectionPromise;
  fontPairing: (
    where: FontPairingWhereUniqueInput
  ) => FontPairingNullablePromise;
  fontPairings: (args?: {
    where?: FontPairingWhereInput;
    orderBy?: FontPairingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FontPairing>;
  fontPairingsConnection: (args?: {
    where?: FontPairingWhereInput;
    orderBy?: FontPairingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FontPairingConnectionPromise;
  theme: (where: ThemeWhereUniqueInput) => ThemeNullablePromise;
  themes: (args?: {
    where?: ThemeWhereInput;
    orderBy?: ThemeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Theme>;
  themesConnection: (args?: {
    where?: ThemeWhereInput;
    orderBy?: ThemeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ThemeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createColorPallete: (data: ColorPalleteCreateInput) => ColorPalletePromise;
  updateColorPallete: (args: {
    data: ColorPalleteUpdateInput;
    where: ColorPalleteWhereUniqueInput;
  }) => ColorPalletePromise;
  updateManyColorPalletes: (args: {
    data: ColorPalleteUpdateManyMutationInput;
    where?: ColorPalleteWhereInput;
  }) => BatchPayloadPromise;
  upsertColorPallete: (args: {
    where: ColorPalleteWhereUniqueInput;
    create: ColorPalleteCreateInput;
    update: ColorPalleteUpdateInput;
  }) => ColorPalletePromise;
  deleteColorPallete: (
    where: ColorPalleteWhereUniqueInput
  ) => ColorPalletePromise;
  deleteManyColorPalletes: (
    where?: ColorPalleteWhereInput
  ) => BatchPayloadPromise;
  createFontPairing: (data: FontPairingCreateInput) => FontPairingPromise;
  updateFontPairing: (args: {
    data: FontPairingUpdateInput;
    where: FontPairingWhereUniqueInput;
  }) => FontPairingPromise;
  updateManyFontPairings: (args: {
    data: FontPairingUpdateManyMutationInput;
    where?: FontPairingWhereInput;
  }) => BatchPayloadPromise;
  upsertFontPairing: (args: {
    where: FontPairingWhereUniqueInput;
    create: FontPairingCreateInput;
    update: FontPairingUpdateInput;
  }) => FontPairingPromise;
  deleteFontPairing: (where: FontPairingWhereUniqueInput) => FontPairingPromise;
  deleteManyFontPairings: (
    where?: FontPairingWhereInput
  ) => BatchPayloadPromise;
  createTheme: (data: ThemeCreateInput) => ThemePromise;
  updateTheme: (args: {
    data: ThemeUpdateInput;
    where: ThemeWhereUniqueInput;
  }) => ThemePromise;
  updateManyThemes: (args: {
    data: ThemeUpdateManyMutationInput;
    where?: ThemeWhereInput;
  }) => BatchPayloadPromise;
  upsertTheme: (args: {
    where: ThemeWhereUniqueInput;
    create: ThemeCreateInput;
    update: ThemeUpdateInput;
  }) => ThemePromise;
  deleteTheme: (where: ThemeWhereUniqueInput) => ThemePromise;
  deleteManyThemes: (where?: ThemeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  colorPallete: (
    where?: ColorPalleteSubscriptionWhereInput
  ) => ColorPalleteSubscriptionPayloadSubscription;
  fontPairing: (
    where?: FontPairingSubscriptionWhereInput
  ) => FontPairingSubscriptionPayloadSubscription;
  theme: (
    where?: ThemeSubscriptionWhereInput
  ) => ThemeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ColorPalleteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "primaryLight_ASC"
  | "primaryLight_DESC"
  | "primaryDark_ASC"
  | "primaryDark_DESC"
  | "accentLight_ASC"
  | "accentLight_DESC"
  | "accentDark_ASC"
  | "accentDark_DESC"
  | "accentBrand_ASC"
  | "accentBrand_DESC";

export type FontPairingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "primary_ASC"
  | "primary_DESC"
  | "secondary_ASC"
  | "secondary_DESC";

export type ThemeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ColorPalleteUpdateInput {
  title?: Maybe<String>;
  primaryLight?: Maybe<String>;
  primaryDark?: Maybe<String>;
  accentLight?: Maybe<String>;
  accentDark?: Maybe<String>;
  accentBrand?: Maybe<String>;
}

export type ColorPalleteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ColorPalleteUpdateDataInput {
  title?: Maybe<String>;
  primaryLight?: Maybe<String>;
  primaryDark?: Maybe<String>;
  accentLight?: Maybe<String>;
  accentDark?: Maybe<String>;
  accentBrand?: Maybe<String>;
}

export interface FontPairingCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  primary: String;
  secondary: String;
}

export interface ThemeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  colors?: Maybe<ColorPalleteWhereInput>;
  fonts?: Maybe<FontPairingWhereInput>;
  AND?: Maybe<ThemeWhereInput[] | ThemeWhereInput>;
  OR?: Maybe<ThemeWhereInput[] | ThemeWhereInput>;
  NOT?: Maybe<ThemeWhereInput[] | ThemeWhereInput>;
}

export interface ColorPalleteUpdateManyMutationInput {
  title?: Maybe<String>;
  primaryLight?: Maybe<String>;
  primaryDark?: Maybe<String>;
  accentLight?: Maybe<String>;
  accentDark?: Maybe<String>;
  accentBrand?: Maybe<String>;
}

export interface ThemeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ThemeWhereInput>;
  AND?: Maybe<ThemeSubscriptionWhereInput[] | ThemeSubscriptionWhereInput>;
  OR?: Maybe<ThemeSubscriptionWhereInput[] | ThemeSubscriptionWhereInput>;
  NOT?: Maybe<ThemeSubscriptionWhereInput[] | ThemeSubscriptionWhereInput>;
}

export interface ColorPalleteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ColorPalleteWhereInput>;
  AND?: Maybe<
    ColorPalleteSubscriptionWhereInput[] | ColorPalleteSubscriptionWhereInput
  >;
  OR?: Maybe<
    ColorPalleteSubscriptionWhereInput[] | ColorPalleteSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ColorPalleteSubscriptionWhereInput[] | ColorPalleteSubscriptionWhereInput
  >;
}

export interface ColorPalleteUpdateOneRequiredInput {
  create?: Maybe<ColorPalleteCreateInput>;
  update?: Maybe<ColorPalleteUpdateDataInput>;
  upsert?: Maybe<ColorPalleteUpsertNestedInput>;
  connect?: Maybe<ColorPalleteWhereUniqueInput>;
}

export type FontPairingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ThemeUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  colors?: Maybe<ColorPalleteUpdateOneRequiredInput>;
  fonts?: Maybe<FontPairingUpdateOneRequiredInput>;
}

export interface FontPairingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  primary?: Maybe<String>;
  primary_not?: Maybe<String>;
  primary_in?: Maybe<String[] | String>;
  primary_not_in?: Maybe<String[] | String>;
  primary_lt?: Maybe<String>;
  primary_lte?: Maybe<String>;
  primary_gt?: Maybe<String>;
  primary_gte?: Maybe<String>;
  primary_contains?: Maybe<String>;
  primary_not_contains?: Maybe<String>;
  primary_starts_with?: Maybe<String>;
  primary_not_starts_with?: Maybe<String>;
  primary_ends_with?: Maybe<String>;
  primary_not_ends_with?: Maybe<String>;
  secondary?: Maybe<String>;
  secondary_not?: Maybe<String>;
  secondary_in?: Maybe<String[] | String>;
  secondary_not_in?: Maybe<String[] | String>;
  secondary_lt?: Maybe<String>;
  secondary_lte?: Maybe<String>;
  secondary_gt?: Maybe<String>;
  secondary_gte?: Maybe<String>;
  secondary_contains?: Maybe<String>;
  secondary_not_contains?: Maybe<String>;
  secondary_starts_with?: Maybe<String>;
  secondary_not_starts_with?: Maybe<String>;
  secondary_ends_with?: Maybe<String>;
  secondary_not_ends_with?: Maybe<String>;
  AND?: Maybe<FontPairingWhereInput[] | FontPairingWhereInput>;
  OR?: Maybe<FontPairingWhereInput[] | FontPairingWhereInput>;
  NOT?: Maybe<FontPairingWhereInput[] | FontPairingWhereInput>;
}

export interface FontPairingCreateOneInput {
  create?: Maybe<FontPairingCreateInput>;
  connect?: Maybe<FontPairingWhereUniqueInput>;
}

export interface FontPairingUpdateDataInput {
  title?: Maybe<String>;
  primary?: Maybe<String>;
  secondary?: Maybe<String>;
}

export interface ColorPalleteUpsertNestedInput {
  update: ColorPalleteUpdateDataInput;
  create: ColorPalleteCreateInput;
}

export interface FontPairingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FontPairingWhereInput>;
  AND?: Maybe<
    FontPairingSubscriptionWhereInput[] | FontPairingSubscriptionWhereInput
  >;
  OR?: Maybe<
    FontPairingSubscriptionWhereInput[] | FontPairingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FontPairingSubscriptionWhereInput[] | FontPairingSubscriptionWhereInput
  >;
}

export interface ColorPalleteCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  primaryLight: String;
  primaryDark: String;
  accentLight: String;
  accentDark: String;
  accentBrand: String;
}

export interface FontPairingUpsertNestedInput {
  update: FontPairingUpdateDataInput;
  create: FontPairingCreateInput;
}

export interface FontPairingUpdateInput {
  title?: Maybe<String>;
  primary?: Maybe<String>;
  secondary?: Maybe<String>;
}

export interface FontPairingUpdateManyMutationInput {
  title?: Maybe<String>;
  primary?: Maybe<String>;
  secondary?: Maybe<String>;
}

export interface ThemeCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  colors: ColorPalleteCreateOneInput;
  fonts: FontPairingCreateOneInput;
}

export interface ColorPalleteCreateOneInput {
  create?: Maybe<ColorPalleteCreateInput>;
  connect?: Maybe<ColorPalleteWhereUniqueInput>;
}

export interface ColorPalleteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  primaryLight?: Maybe<String>;
  primaryLight_not?: Maybe<String>;
  primaryLight_in?: Maybe<String[] | String>;
  primaryLight_not_in?: Maybe<String[] | String>;
  primaryLight_lt?: Maybe<String>;
  primaryLight_lte?: Maybe<String>;
  primaryLight_gt?: Maybe<String>;
  primaryLight_gte?: Maybe<String>;
  primaryLight_contains?: Maybe<String>;
  primaryLight_not_contains?: Maybe<String>;
  primaryLight_starts_with?: Maybe<String>;
  primaryLight_not_starts_with?: Maybe<String>;
  primaryLight_ends_with?: Maybe<String>;
  primaryLight_not_ends_with?: Maybe<String>;
  primaryDark?: Maybe<String>;
  primaryDark_not?: Maybe<String>;
  primaryDark_in?: Maybe<String[] | String>;
  primaryDark_not_in?: Maybe<String[] | String>;
  primaryDark_lt?: Maybe<String>;
  primaryDark_lte?: Maybe<String>;
  primaryDark_gt?: Maybe<String>;
  primaryDark_gte?: Maybe<String>;
  primaryDark_contains?: Maybe<String>;
  primaryDark_not_contains?: Maybe<String>;
  primaryDark_starts_with?: Maybe<String>;
  primaryDark_not_starts_with?: Maybe<String>;
  primaryDark_ends_with?: Maybe<String>;
  primaryDark_not_ends_with?: Maybe<String>;
  accentLight?: Maybe<String>;
  accentLight_not?: Maybe<String>;
  accentLight_in?: Maybe<String[] | String>;
  accentLight_not_in?: Maybe<String[] | String>;
  accentLight_lt?: Maybe<String>;
  accentLight_lte?: Maybe<String>;
  accentLight_gt?: Maybe<String>;
  accentLight_gte?: Maybe<String>;
  accentLight_contains?: Maybe<String>;
  accentLight_not_contains?: Maybe<String>;
  accentLight_starts_with?: Maybe<String>;
  accentLight_not_starts_with?: Maybe<String>;
  accentLight_ends_with?: Maybe<String>;
  accentLight_not_ends_with?: Maybe<String>;
  accentDark?: Maybe<String>;
  accentDark_not?: Maybe<String>;
  accentDark_in?: Maybe<String[] | String>;
  accentDark_not_in?: Maybe<String[] | String>;
  accentDark_lt?: Maybe<String>;
  accentDark_lte?: Maybe<String>;
  accentDark_gt?: Maybe<String>;
  accentDark_gte?: Maybe<String>;
  accentDark_contains?: Maybe<String>;
  accentDark_not_contains?: Maybe<String>;
  accentDark_starts_with?: Maybe<String>;
  accentDark_not_starts_with?: Maybe<String>;
  accentDark_ends_with?: Maybe<String>;
  accentDark_not_ends_with?: Maybe<String>;
  accentBrand?: Maybe<String>;
  accentBrand_not?: Maybe<String>;
  accentBrand_in?: Maybe<String[] | String>;
  accentBrand_not_in?: Maybe<String[] | String>;
  accentBrand_lt?: Maybe<String>;
  accentBrand_lte?: Maybe<String>;
  accentBrand_gt?: Maybe<String>;
  accentBrand_gte?: Maybe<String>;
  accentBrand_contains?: Maybe<String>;
  accentBrand_not_contains?: Maybe<String>;
  accentBrand_starts_with?: Maybe<String>;
  accentBrand_not_starts_with?: Maybe<String>;
  accentBrand_ends_with?: Maybe<String>;
  accentBrand_not_ends_with?: Maybe<String>;
  AND?: Maybe<ColorPalleteWhereInput[] | ColorPalleteWhereInput>;
  OR?: Maybe<ColorPalleteWhereInput[] | ColorPalleteWhereInput>;
  NOT?: Maybe<ColorPalleteWhereInput[] | ColorPalleteWhereInput>;
}

export interface ThemeUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export type ThemeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FontPairingUpdateOneRequiredInput {
  create?: Maybe<FontPairingCreateInput>;
  update?: Maybe<FontPairingUpdateDataInput>;
  upsert?: Maybe<FontPairingUpsertNestedInput>;
  connect?: Maybe<FontPairingWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface FontPairingSubscriptionPayload {
  mutation: MutationType;
  node: FontPairing;
  updatedFields: String[];
  previousValues: FontPairingPreviousValues;
}

export interface FontPairingSubscriptionPayloadPromise
  extends Promise<FontPairingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FontPairingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FontPairingPreviousValuesPromise>() => T;
}

export interface FontPairingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FontPairingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FontPairingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FontPairingPreviousValuesSubscription>() => T;
}

export interface FontPairingEdge {
  node: FontPairing;
  cursor: String;
}

export interface FontPairingEdgePromise
  extends Promise<FontPairingEdge>,
    Fragmentable {
  node: <T = FontPairingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FontPairingEdgeSubscription
  extends Promise<AsyncIterator<FontPairingEdge>>,
    Fragmentable {
  node: <T = FontPairingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ThemePreviousValues {
  id: ID_Output;
  title: String;
  description: String;
}

export interface ThemePreviousValuesPromise
  extends Promise<ThemePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ThemePreviousValuesSubscription
  extends Promise<AsyncIterator<ThemePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface FontPairingConnection {
  pageInfo: PageInfo;
  edges: FontPairingEdge[];
}

export interface FontPairingConnectionPromise
  extends Promise<FontPairingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FontPairingEdge>>() => T;
  aggregate: <T = AggregateFontPairingPromise>() => T;
}

export interface FontPairingConnectionSubscription
  extends Promise<AsyncIterator<FontPairingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FontPairingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFontPairingSubscription>() => T;
}

export interface ColorPalleteConnection {
  pageInfo: PageInfo;
  edges: ColorPalleteEdge[];
}

export interface ColorPalleteConnectionPromise
  extends Promise<ColorPalleteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ColorPalleteEdge>>() => T;
  aggregate: <T = AggregateColorPalletePromise>() => T;
}

export interface ColorPalleteConnectionSubscription
  extends Promise<AsyncIterator<ColorPalleteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ColorPalleteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateColorPalleteSubscription>() => T;
}

export interface FontPairing {
  id: ID_Output;
  title?: String;
  primary: String;
  secondary: String;
}

export interface FontPairingPromise extends Promise<FontPairing>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  primary: () => Promise<String>;
  secondary: () => Promise<String>;
}

export interface FontPairingSubscription
  extends Promise<AsyncIterator<FontPairing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  primary: () => Promise<AsyncIterator<String>>;
  secondary: () => Promise<AsyncIterator<String>>;
}

export interface FontPairingNullablePromise
  extends Promise<FontPairing | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  primary: () => Promise<String>;
  secondary: () => Promise<String>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateColorPallete {
  count: Int;
}

export interface AggregateColorPalletePromise
  extends Promise<AggregateColorPallete>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateColorPalleteSubscription
  extends Promise<AsyncIterator<AggregateColorPallete>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateTheme {
  count: Int;
}

export interface AggregateThemePromise
  extends Promise<AggregateTheme>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThemeSubscription
  extends Promise<AsyncIterator<AggregateTheme>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ColorPalleteEdge {
  node: ColorPallete;
  cursor: String;
}

export interface ColorPalleteEdgePromise
  extends Promise<ColorPalleteEdge>,
    Fragmentable {
  node: <T = ColorPalletePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ColorPalleteEdgeSubscription
  extends Promise<AsyncIterator<ColorPalleteEdge>>,
    Fragmentable {
  node: <T = ColorPalleteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ThemeConnection {
  pageInfo: PageInfo;
  edges: ThemeEdge[];
}

export interface ThemeConnectionPromise
  extends Promise<ThemeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThemeEdge>>() => T;
  aggregate: <T = AggregateThemePromise>() => T;
}

export interface ThemeConnectionSubscription
  extends Promise<AsyncIterator<ThemeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThemeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThemeSubscription>() => T;
}

export interface AggregateFontPairing {
  count: Int;
}

export interface AggregateFontPairingPromise
  extends Promise<AggregateFontPairing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFontPairingSubscription
  extends Promise<AsyncIterator<AggregateFontPairing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThemeSubscriptionPayload {
  mutation: MutationType;
  node: Theme;
  updatedFields: String[];
  previousValues: ThemePreviousValues;
}

export interface ThemeSubscriptionPayloadPromise
  extends Promise<ThemeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThemePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThemePreviousValuesPromise>() => T;
}

export interface ThemeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThemeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThemeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThemePreviousValuesSubscription>() => T;
}

export interface ColorPalletePreviousValues {
  id: ID_Output;
  title?: String;
  primaryLight: String;
  primaryDark: String;
  accentLight: String;
  accentDark: String;
  accentBrand: String;
}

export interface ColorPalletePreviousValuesPromise
  extends Promise<ColorPalletePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  primaryLight: () => Promise<String>;
  primaryDark: () => Promise<String>;
  accentLight: () => Promise<String>;
  accentDark: () => Promise<String>;
  accentBrand: () => Promise<String>;
}

export interface ColorPalletePreviousValuesSubscription
  extends Promise<AsyncIterator<ColorPalletePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  primaryLight: () => Promise<AsyncIterator<String>>;
  primaryDark: () => Promise<AsyncIterator<String>>;
  accentLight: () => Promise<AsyncIterator<String>>;
  accentDark: () => Promise<AsyncIterator<String>>;
  accentBrand: () => Promise<AsyncIterator<String>>;
}

export interface ColorPalleteSubscriptionPayload {
  mutation: MutationType;
  node: ColorPallete;
  updatedFields: String[];
  previousValues: ColorPalletePreviousValues;
}

export interface ColorPalleteSubscriptionPayloadPromise
  extends Promise<ColorPalleteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ColorPalletePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ColorPalletePreviousValuesPromise>() => T;
}

export interface ColorPalleteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ColorPalleteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ColorPalleteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ColorPalletePreviousValuesSubscription>() => T;
}

export interface ColorPallete {
  id: ID_Output;
  title?: String;
  primaryLight: String;
  primaryDark: String;
  accentLight: String;
  accentDark: String;
  accentBrand: String;
}

export interface ColorPalletePromise
  extends Promise<ColorPallete>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  primaryLight: () => Promise<String>;
  primaryDark: () => Promise<String>;
  accentLight: () => Promise<String>;
  accentDark: () => Promise<String>;
  accentBrand: () => Promise<String>;
}

export interface ColorPalleteSubscription
  extends Promise<AsyncIterator<ColorPallete>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  primaryLight: () => Promise<AsyncIterator<String>>;
  primaryDark: () => Promise<AsyncIterator<String>>;
  accentLight: () => Promise<AsyncIterator<String>>;
  accentDark: () => Promise<AsyncIterator<String>>;
  accentBrand: () => Promise<AsyncIterator<String>>;
}

export interface ColorPalleteNullablePromise
  extends Promise<ColorPallete | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  primaryLight: () => Promise<String>;
  primaryDark: () => Promise<String>;
  accentLight: () => Promise<String>;
  accentDark: () => Promise<String>;
  accentBrand: () => Promise<String>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Theme {
  id: ID_Output;
  title: String;
  description: String;
}

export interface ThemePromise extends Promise<Theme>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  colors: <T = ColorPalletePromise>() => T;
  fonts: <T = FontPairingPromise>() => T;
}

export interface ThemeSubscription
  extends Promise<AsyncIterator<Theme>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  colors: <T = ColorPalleteSubscription>() => T;
  fonts: <T = FontPairingSubscription>() => T;
}

export interface ThemeNullablePromise
  extends Promise<Theme | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  colors: <T = ColorPalletePromise>() => T;
  fonts: <T = FontPairingPromise>() => T;
}

export interface ThemeEdge {
  node: Theme;
  cursor: String;
}

export interface ThemeEdgePromise extends Promise<ThemeEdge>, Fragmentable {
  node: <T = ThemePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThemeEdgeSubscription
  extends Promise<AsyncIterator<ThemeEdge>>,
    Fragmentable {
  node: <T = ThemeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FontPairingPreviousValues {
  id: ID_Output;
  title?: String;
  primary: String;
  secondary: String;
}

export interface FontPairingPreviousValuesPromise
  extends Promise<FontPairingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  primary: () => Promise<String>;
  secondary: () => Promise<String>;
}

export interface FontPairingPreviousValuesSubscription
  extends Promise<AsyncIterator<FontPairingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  primary: () => Promise<AsyncIterator<String>>;
  secondary: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Theme",
    embedded: false
  },
  {
    name: "ColorPallete",
    embedded: false
  },
  {
    name: "FontPairing",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
